(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{356:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"gifガチャ"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gifガチャ"}},[t._v("#")]),t._v(" GIFガチャ")]),t._v(" "),s("h2",{attrs:{id:"問題"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#問題"}},[t._v("#")]),t._v(" 問題")]),t._v(" "),s("h3",{attrs:{id:"猫gifガチャを作ろう"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#猫gifガチャを作ろう"}},[t._v("#")]),t._v(" 猫GIFガチャを作ろう")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://codepen.io/MasahiroHarada/pen/YBqzgQ/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codepen.io/MasahiroHarada/pen/YBqzgQ/"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("後述する仕様の通りに動作するように JavaScript を編集しましょう。"),s("br"),t._v("\n穴埋めになっているので "),s("code",[t._v("/* Insert code here... */")]),t._v(" の箇所にコードを足してください。")]),t._v(" "),s("p",[t._v("HTML と CSS は出来ているので変更しません。")]),t._v(" "),s("p",[t._v("今回使用する API（ruddy-mail.glitch.me）は "),s("a",{attrs:{href:"https://glitch.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Glitch"),s("OutboundLink")],1),t._v(" で作成しました。\nサーバサイドのコードは以下の URL から閲覧できます。特にヒントというわけでもありませんが、参考までに。\n（別の課題で使用する API のコードも含まれています。）")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://glitch.com/edit/#!/ruddy-mail",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://glitch.com/edit/#!/ruddy-mail"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"前提条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前提条件"}},[t._v("#")]),t._v(" 前提条件")]),t._v(" "),s("ul",[s("li",[t._v("jQuery などのライブラリは使用せずに実装してください。")]),t._v(" "),s("li",[t._v("対応ブラウザは Google Chrome 最新版とします。")]),t._v(" "),s("li",[t._v("解答例では ES2015 以降の文法も使用します。")]),t._v(" "),s("li",[t._v("非同期通信には "),s("a",{attrs:{href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"}},[t._v("Axios"),s("OutboundLink")],1),t._v(" というライブラリを用います。"),s("br"),t._v("（CodePen には事前に読み込んであります。）")])]),t._v(" "),s("h3",{attrs:{id:"仕様"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#仕様"}},[t._v("#")]),t._v(" 仕様")]),t._v(" "),s("ul",[s("li",[t._v("「遊ぶ」ボタンをクリックすると、ランダムに選ばれた猫の GIF 画像が表示されます。")]),t._v(" "),s("li",[t._v("すでに表示されている GIF 画像は消えてから新しい画像が表示されます。")]),t._v(" "),s("li",[t._v("GIF 画像取得 API（"),s("code",[t._v("/api/gacha")]),t._v("）は以下の形式の JSON を返却します。")])]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"url"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"画像のURL"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),s("p",[t._v("今回はヒントとして Promise オブジェクトについて簡単に説明します。")]),t._v(" "),s("p",[t._v("API との通信における非同期処理には "),s("strong",[t._v("Promise")]),t._v(" オブジェクトを使用しています。Promise は今や JavaScript において非同期処理を扱う一般的な手法ですので覚えておきましょう。")]),t._v(" "),s("p",[t._v("API との通信には "),s("strong",[t._v("Axios")]),t._v(" というライブラリを使っています。そして Axios の通信メソッドは Promise オブジェクトを返却します。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const promise = axios.get('/api/abcdefg');\n")])])]),s("p",[t._v("Promise という英単語は「約束」という意味です。約束とは、未来の出来事を今決めることですね。Promise オブジェクトも同様に、未来の処理を定義します。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const promise = axios.get('/api/abcdefg');\n// (1) ここでは通信結果は返ってきていない。\npromise.then(response => {\n  // (2) ここで通信が返ってきている。\n});\n// (3) ここでも通信結果は返ってきていない。\n")])])]),s("p",[s("code",[t._v("axios.get()")]),t._v(" が返却するのは通信結果ではなく、Promise オブジェクトです。Promise オブジェクトの "),s("code",[t._v("then")]),t._v(" メソッドに、非同期処理が終わったときに実行させる関数を渡すことで、通信結果を受け取ることができます。HTTP 通信という非同期処理が終わったとき（つまり未来）に処理してほしいことを「約束」させるわけですね。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const promise = axios.get('/api/abcdefg');\n\npromise.then(response => {\n  // 通信成功\n});\n\npromise.catch(error => {\n  // 通信失敗 500など\n});\n")])])]),s("p",[s("code",[t._v("catch")]),t._v(" メソッドに関数を渡すことで、非同期処理が失敗したときの挙動を約束させることもできます。")]),t._v(" "),s("p",[t._v("上記のコードはメソッドチェーンで以下のように書くこともできます。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/abcdefg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("response")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通信成功")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通信失敗 500など")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Promise オブジェクトを変数に入れる必要はないので、こちらの書き方の方が一般的です。")]),t._v(" "),s("p",[t._v("Promise は非同期処理を扱うための汎用的な機能ですので、その用途は HTTP 通信に限定されません。ただやはりよく使うのは通信処理でしょう。")]),t._v(" "),s("h2",{attrs:{id:"進め方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#進め方"}},[t._v("#")]),t._v(" 進め方")]),t._v(" "),s("p",[s("a",{attrs:{href:"/practice/modal"}},[t._v("モーダルウィンドウ")]),t._v("と同様です。")]),t._v(" "),s("h2",{attrs:{id:"解答例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解答例"}},[t._v("#")]),t._v(" 解答例")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("解答例と解説")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.hypertextcandy.com/javascript-practical-quiz-cat-gif-gacha",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.hypertextcandy.com/javascript-practical-quiz-cat-gif-gacha"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);